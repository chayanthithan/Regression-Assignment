# -*- coding: utf-8 -*-
"""Multiple_Linear_Regression_Insurance_pre.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GwsnrmrBPUkMvp8tGHVNYoOvOixXoJLm
"""

# Pandas is a powerful data analysis and manipulation library

!pip install pandas

# import the Pandas library
import pandas as pd

# This function reads the CSV file located at the specified path
dataset = pd.read_csv("/content/sample_data/insurance_pre.csv")

# used to display a information about dataset
dataset.info()

# performs one-hot encoding on categorical variables
# pd.get_dummies(): This function converts categorical variables into a series of binary (0 or 1) columns.
# drop_first=True: This parameter drops the first level of each categorical variable to avoid the "dummy variable trap,"
df = pd.get_dummies(dataset,drop_first=True);

# df.to_csv(): This function saves the Dataset df to a CSV file.
# "insurance_pre_one_hot_encoding.csv": The name of the output file where the encoded data is saved.
# index=False: prevents the Datasetâ€™s index
df.to_csv("insurance_pre_one_hot_encoding.csv",index=False)

df

dataset = pd.read_csv("/content/insurance_pre_one_hot_encoding.csv")

dataset

# contains the independent variables
independent = dataset[['age','bmi','children','sex_male','smoker_yes']]

independent

# contains the dependent variables
dependent = dataset[['charges']]

dependent



# train_test_split: This function is used to split the dataset into training and testing sets.
# test_size=0.20: This specifies that 20% of the data will be allocated to the testing set, and 80% will be used for training.
# random_state=0: This ensures that the data is split the same way every time
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(independent,dependent,test_size=0.20,random_state=0)

x_train

y_train

from sklearn.linear_model import LinearRegression
# regressor = LinearRegression(): This creates an instance of the LinearRegression class.
regressor = LinearRegression()
# regressor.fit(x_train, y_train): This trains the linear regression model
regressor.fit(x_train,y_train)

# to make predictions on new data.
y_predict = regressor.predict(x_test)

y_predict

# to evaluate how well the model is performing
from sklearn.metrics import r2_score
r_score = r2_score(y_test,y_predict)

r_score

# pickle to save the trained model
import pickle
filename = 'finalized_model_mul_linear.sav'
# This line opens a file in binary write mode ('wb') and
# uses pickle.dump to serialize the regressor object and write it to the file specified by filename.
pickle.dump(regressor,open(filename,'wb'))

# This will deserialize the model from the file and load it into the loaded_model variable,
loaded_model = pickle.load(open('finalized_model_mul_linear.sav','rb'))

result = loaded_model.predict([[30,27.900,0,0,1]])

result